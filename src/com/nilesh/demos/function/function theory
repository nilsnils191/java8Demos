
/**
 * Represents a function that accepts one argument and produces a result.
 
 having following 4 methods
 
 1. R apply(T t);
 2. default <V> Function<V, R> compose(Function<? super V, ? extends T> before) {
 3. default <V> Function<V, R> compose(Function<? super V, ? extends T> before) {
 4. static <T> Function<T, T> identity() {
 
@FunctionalInterface
public interface Function<T, R> {

    /**
     * Applies this function to the given argument.
     
     
    R apply(T t);

    /**
     * Returns a composed function that first applies the {@code before}
     * function to its input, and then applies this function to the result.
     * If evaluation of either function throws an exception, it is relayed to
     * the caller of the composed function.
     ---------------------------------------------------------------------------------------
    default <V> Function<V, R> compose(Function<? super V, ? extends T> before) {
    ---------------------------------------------------------------------------------------

    /**
     * Returns a composed function that first applies this function to
     * its input, and then applies the {@code after} function to the result.
     * If evaluation of either function throws an exception, it is relayed to
     * the caller of the composed function.
     */
     ---------------------------------------------------------------------------------------
    default <V> Function<T, V> andThen(Function<? super R, ? extends V> after) {
	---------------------------------------------------------------------------------------


    /**
     * Returns a function that always returns its input argument.
     
     ---------------------------------------------------------------------------------------
    static <T> Function<T, T> identity() {
    ---------------------------------------------------------------------------------------
}
